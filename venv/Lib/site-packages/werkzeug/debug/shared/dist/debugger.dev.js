"use strict";

docReady(function () {
  if (!EVALEX_TRUSTED) {
    initPinBox();
  } // if we are in console mode, show the console.


  if (CONSOLE_MODE && EVALEX) {
    createInteractiveConsole();
  }

  var frames = document.querySelectorAll("div.traceback div.frame");

  if (EVALEX) {
    addConsoleIconToFrames(frames);
  }

  addEventListenersToElements(document.querySelectorAll("div.detail"), "click", function () {
    return document.querySelector("div.traceback").scrollIntoView(false);
  });
  addToggleFrameTraceback(frames);
  addToggleTraceTypesOnClick(document.querySelectorAll("h2.traceback"));
  addInfoPrompt(document.querySelectorAll("span.nojavascript"));
  wrapPlainTraceback();
});

function addToggleFrameTraceback(frames) {
  frames.forEach(function (frame) {
    frame.addEventListener("click", function () {
      frame.getElementsByTagName("pre")[0].parentElement.classList.toggle("expanded");
    });
  });
}

function wrapPlainTraceback() {
  var plainTraceback = document.querySelector("div.plain textarea");
  var wrapper = document.createElement("pre");
  var textNode = document.createTextNode(plainTraceback.textContent);
  wrapper.appendChild(textNode);
  plainTraceback.replaceWith(wrapper);
}

function initPinBox() {
  document.querySelector(".pin-prompt form").addEventListener("submit", function (event) {
    event.preventDefault();
    var pin = encodeURIComponent(this.pin.value);
    var encodedSecret = encodeURIComponent(SECRET);
    var btn = this.btn;
    btn.disabled = true;
    fetch("".concat(document.location.pathname, "?__debugger__=yes&cmd=pinauth&pin=").concat(pin, "&s=").concat(encodedSecret)).then(function (res) {
      return res.json();
    }).then(function (_ref) {
      var auth = _ref.auth,
          exhausted = _ref.exhausted;

      if (auth) {
        EVALEX_TRUSTED = true;
        fadeOut(document.getElementsByClassName("pin-prompt")[0]);
      } else {
        alert("Error: ".concat(exhausted ? "too many attempts.  Restart server to retry." : "incorrect pin"));
      }
    })["catch"](function (err) {
      alert("Error: Could not verify PIN.  Network error?");
      console.error(err);
    })["finally"](function () {
      return btn.disabled = false;
    });
  }, false);
}

function promptForPin() {
  if (!EVALEX_TRUSTED) {
    var encodedSecret = encodeURIComponent(SECRET);
    fetch("".concat(document.location.pathname, "?__debugger__=yes&cmd=printpin&s=").concat(encodedSecret));
    var pinPrompt = document.getElementsByClassName("pin-prompt")[0];
    fadeIn(pinPrompt);
    document.querySelector('.pin-prompt input[name="pin"]').focus();
  }
}
/**
 * Helper function for shell initialization
 */


function openShell(consoleNode, target, frameID) {
  promptForPin();

  if (consoleNode) {
    slideToggle(consoleNode);
    return consoleNode;
  }

  var historyPos = 0;
  var history = [""];
  var consoleElement = createConsole();
  var output = createConsoleOutput();
  var form = createConsoleInputForm();
  var command = createConsoleInput();
  target.parentNode.appendChild(consoleElement);
  consoleElement.append(output);
  consoleElement.append(form);
  form.append(command);
  command.focus();
  slideToggle(consoleElement);
  form.addEventListener("submit", function (e) {
    handleConsoleSubmit(e, command, frameID).then(function (consoleOutput) {
      output.append(consoleOutput);
      command.focus();
      consoleElement.scrollTo(0, consoleElement.scrollHeight);
      var old = history.pop();
      history.push(command.value);

      if (typeof old !== "undefined") {
        history.push(old);
      }

      historyPos = history.length - 1;
      command.value = "";
    });
  });
  command.addEventListener("keydown", function (e) {
    if (e.key === "l" && e.ctrlKey) {
      output.innerText = "--- screen cleared ---";
    } else if (e.key === "ArrowUp" || e.key === "ArrowDown") {
      // Handle up arrow and down arrow.
      if (e.key === "ArrowUp" && historyPos > 0) {
        e.preventDefault();
        historyPos--;
      } else if (e.key === "ArrowDown" && historyPos < history.length - 1) {
        historyPos++;
      }

      command.value = history[historyPos];
    }

    return false;
  });
  return consoleElement;
}

function addEventListenersToElements(elements, event, listener) {
  elements.forEach(function (el) {
    return el.addEventListener(event, listener);
  });
}
/**
 * Add extra info
 */


function addInfoPrompt(elements) {
  for (var i = 0; i < elements.length; i++) {
    elements[i].innerHTML = "<p>To switch between the interactive traceback and the plaintext " + 'one, you can click on the "Traceback" headline. From the text ' + "traceback you can also create a paste of it. " + (!EVALEX ? "" : "For code execution mouse-over the frame you want to debug and " + "click on the console icon on the right side." + "<p>You can execute arbitrary Python code in the stack frames and " + "there are some extra helpers available for introspection:" + "<ul><li><code>dump()</code> shows all variables in the frame" + "<li><code>dump(obj)</code> dumps all that's known about the object</ul>");
    elements[i].classList.remove("nojavascript");
  }
}

function addConsoleIconToFrames(frames) {
  var _loop = function _loop(i) {
    var consoleNode = null;
    var target = frames[i];
    var frameID = frames[i].id.substring(6);

    for (var j = 0; j < target.getElementsByTagName("pre").length; j++) {
      var img = createIconForConsole();
      img.addEventListener("click", function (e) {
        e.stopPropagation();
        consoleNode = openShell(consoleNode, target, frameID);
        return false;
      });
      target.getElementsByTagName("pre")[j].append(img);
    }
  };

  for (var i = 0; i < frames.length; i++) {
    _loop(i);
  }
}

function slideToggle(target) {
  target.classList.toggle("active");
}
/**
 * toggle traceback types on click.
 */


function addToggleTraceTypesOnClick(elements) {
  for (var i = 0; i < elements.length; i++) {
    elements[i].addEventListener("click", function () {
      document.querySelector("div.traceback").classList.toggle("hidden");
      document.querySelector("div.plain").classList.toggle("hidden");
    });
    elements[i].style.cursor = "pointer";
    document.querySelector("div.plain").classList.toggle("hidden");
  }
}

function createConsole() {
  var consoleNode = document.createElement("pre");
  consoleNode.classList.add("console");
  consoleNode.classList.add("active");
  return consoleNode;
}

function createConsoleOutput() {
  var output = document.createElement("div");
  output.classList.add("output");
  output.innerHTML = "[console ready]";
  return output;
}

function createConsoleInputForm() {
  var form = document.createElement("form");
  form.innerHTML = "&gt;&gt;&gt; ";
  return form;
}

function createConsoleInput() {
  var command = document.createElement("input");
  command.type = "text";
  command.setAttribute("autocomplete", "off");
  command.setAttribute("spellcheck", false);
  command.setAttribute("autocapitalize", "off");
  command.setAttribute("autocorrect", "off");
  return command;
}

function createIconForConsole() {
  var img = document.createElement("img");
  img.setAttribute("src", "?__debugger__=yes&cmd=resource&f=console.png");
  img.setAttribute("title", "Open an interactive python shell in this frame");
  return img;
}

function createExpansionButtonForConsole() {
  var expansionButton = document.createElement("a");
  expansionButton.setAttribute("href", "#");
  expansionButton.setAttribute("class", "toggle");
  expansionButton.innerHTML = "&nbsp;&nbsp;";
  return expansionButton;
}

function createInteractiveConsole() {
  var target = document.querySelector("div.console div.inner");

  while (target.firstChild) {
    target.removeChild(target.firstChild);
  }

  openShell(null, target, 0);
}

function handleConsoleSubmit(e, command, frameID) {
  // Prevent page from refreshing.
  e.preventDefault();
  return new Promise(function (resolve) {
    // Get input command.
    var cmd = command.value; // Setup GET request.

    var urlPath = "";
    var params = {
      __debugger__: "yes",
      cmd: cmd,
      frm: frameID,
      s: SECRET
    };
    var paramString = Object.keys(params).map(function (key) {
      return "&" + encodeURIComponent(key) + "=" + encodeURIComponent(params[key]);
    }).join("");
    fetch(urlPath + "?" + paramString).then(function (res) {
      return res.text();
    }).then(function (data) {
      var tmp = document.createElement("div");
      tmp.innerHTML = data;
      resolve(tmp); // Handle expandable span for long list outputs.
      // Example to test: list(range(13))

      var wrapperAdded = false;
      var wrapperSpan = document.createElement("span");
      var expansionButton = createExpansionButtonForConsole();
      tmp.querySelectorAll("span.extended").forEach(function (spanToWrap) {
        var parentDiv = spanToWrap.parentNode;

        if (!wrapperAdded) {
          parentDiv.insertBefore(wrapperSpan, spanToWrap);
          wrapperAdded = true;
        }

        parentDiv.removeChild(spanToWrap);
        wrapperSpan.append(spanToWrap);
        spanToWrap.hidden = true;
        expansionButton.addEventListener("click", function () {
          spanToWrap.hidden = !spanToWrap.hidden;
          expansionButton.classList.toggle("open");
          return false;
        });
      }); // Add expansion button at end of wrapper.

      if (wrapperAdded) {
        wrapperSpan.append(expansionButton);
      }
    })["catch"](function (err) {
      console.error(err);
    });
    return false;
  });
}

function fadeOut(element) {
  element.style.opacity = 1;

  (function fade() {
    element.style.opacity -= 0.1;

    if (element.style.opacity < 0) {
      element.style.display = "none";
    } else {
      requestAnimationFrame(fade);
    }
  })();
}

function fadeIn(element, display) {
  element.style.opacity = 0;
  element.style.display = display || "block";

  (function fade() {
    var val = parseFloat(element.style.opacity) + 0.1;

    if (val <= 1) {
      element.style.opacity = val;
      requestAnimationFrame(fade);
    }
  })();
}

function docReady(fn) {
  if (document.readyState === "complete" || document.readyState === "interactive") {
    setTimeout(fn, 1);
  } else {
    document.addEventListener("DOMContentLoaded", fn);
  }
}